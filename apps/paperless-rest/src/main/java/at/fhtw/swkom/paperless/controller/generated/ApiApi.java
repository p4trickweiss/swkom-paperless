/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.fhtw.swkom.paperless.controller.generated;

import at.fhtw.swkom.paperless.data.dto.AckTasks200Response;
import at.fhtw.swkom.paperless.data.dto.AckTasksRequest;
import at.fhtw.swkom.paperless.data.dto.BulkEditRequest;
import at.fhtw.swkom.paperless.data.dto.CreateCorrespondentRequest;
import at.fhtw.swkom.paperless.data.dto.CreateDocumentType200Response;
import at.fhtw.swkom.paperless.data.dto.CreateGroupRequest;
import at.fhtw.swkom.paperless.data.dto.CreateSavedViewsRequest;
import at.fhtw.swkom.paperless.data.dto.CreateStoragePath200Response;
import at.fhtw.swkom.paperless.data.dto.CreateStoragePathRequest;
import at.fhtw.swkom.paperless.data.dto.CreateTag200Response;
import at.fhtw.swkom.paperless.data.dto.CreateTagRequest;
import at.fhtw.swkom.paperless.data.dto.CreateUISettings200Response;
import at.fhtw.swkom.paperless.data.dto.CreateUISettingsRequest;
import at.fhtw.swkom.paperless.data.dto.CreateUserRequest;
import org.springframework.format.annotation.DateTimeFormat;
import at.fhtw.swkom.paperless.data.dto.GetCorrespondents200Response;
import at.fhtw.swkom.paperless.data.dto.GetDocument200Response;
import at.fhtw.swkom.paperless.data.dto.GetDocumentMetadata200Response;
import at.fhtw.swkom.paperless.data.dto.GetDocumentSuggestions200Response;
import at.fhtw.swkom.paperless.data.dto.GetDocumentTypes200Response;
import at.fhtw.swkom.paperless.data.dto.GetDocuments200Response;
import at.fhtw.swkom.paperless.data.dto.GetGroups200Response;
import at.fhtw.swkom.paperless.data.dto.GetSavedViews200Response;
import at.fhtw.swkom.paperless.data.dto.GetStoragePaths200Response;
import at.fhtw.swkom.paperless.data.dto.GetTags200Response;
import at.fhtw.swkom.paperless.data.dto.GetTasks200ResponseInner;
import at.fhtw.swkom.paperless.data.dto.GetUISettings200Response;
import at.fhtw.swkom.paperless.data.dto.GetUsers200Response;
import at.fhtw.swkom.paperless.data.dto.GetUsers200ResponseResultsInner;
import java.time.OffsetDateTime;
import at.fhtw.swkom.paperless.data.dto.SelectionData200Response;
import at.fhtw.swkom.paperless.data.dto.SelectionDataRequest;
import at.fhtw.swkom.paperless.data.dto.Statistics200Response;
import at.fhtw.swkom.paperless.data.dto.UpdateCorrespondent200Response;
import at.fhtw.swkom.paperless.data.dto.UpdateCorrespondentRequest;
import at.fhtw.swkom.paperless.data.dto.UpdateDocument200Response;
import at.fhtw.swkom.paperless.data.dto.UpdateDocumentRequest;
import at.fhtw.swkom.paperless.data.dto.UpdateDocumentType200Response;
import at.fhtw.swkom.paperless.data.dto.UpdateDocumentTypeRequest;
import at.fhtw.swkom.paperless.data.dto.UpdateGroup200Response;
import at.fhtw.swkom.paperless.data.dto.UpdateGroupRequest;
import at.fhtw.swkom.paperless.data.dto.UpdateStoragePath200Response;
import at.fhtw.swkom.paperless.data.dto.UpdateStoragePathRequest;
import at.fhtw.swkom.paperless.data.dto.UpdateTag200Response;
import at.fhtw.swkom.paperless.data.dto.UpdateTagRequest;
import at.fhtw.swkom.paperless.data.dto.UpdateUserRequest;
import at.fhtw.swkom.paperless.data.dto.UserInfo;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;

import java.util.List;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-09-18T10:57:25.027163Z[Etc/UTC]")
@Validated
@Tag(name = "Tasks", description = "the Tasks API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/acknowledge_tasks
     *
     * @param ackTasksRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "ackTasks",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AckTasks200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/acknowledge_tasks/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AckTasks200Response> ackTasks(
        @Parameter(name = "AckTasksRequest", description = "") @Valid @RequestBody(required = false) AckTasksRequest ackTasksRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiGet",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/"
    )
    default ResponseEntity<Void> apiGet(
        
    ) {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/search/autocomplete
     *
     * @param term  (optional)
     * @param limit  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "autoComplete",
        tags = { "Search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/search/autocomplete/",
        produces = { "application/json" }
    )
    default ResponseEntity<List<String>> autoComplete(
        @Parameter(name = "term", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "term", required = false) String term,
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ \"\", \"\" ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * POST /api/documents/bulk_edit
     *
     * @param bulkEditRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "bulkEdit",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/documents/bulk_edit/",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> bulkEdit(
        @Parameter(name = "BulkEditRequest", description = "") @Valid @RequestBody(required = false) BulkEditRequest bulkEditRequest
    ) {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * POST /api/correspondents
     *
     * @param createCorrespondentRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "createCorrespondent",
        tags = { "Correspondents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateCorrespondentRequest.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/correspondents/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CreateCorrespondentRequest> createCorrespondent(
        @Parameter(name = "CreateCorrespondentRequest", description = "") @Valid @RequestBody(required = false) CreateCorrespondentRequest createCorrespondentRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : 6, \"matching_algorithm\" : 0, \"is_insensitive\" : true, \"name\" : \"name\", \"match\" : \"match\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * POST /api/document_types
     *
     * @param createCorrespondentRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "createDocumentType",
        tags = { "DocumentTypes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateDocumentType200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/document_types/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CreateDocumentType200Response> createDocumentType(
        @Parameter(name = "CreateCorrespondentRequest", description = "") @Valid @RequestBody(required = false) CreateCorrespondentRequest createCorrespondentRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : 1, \"matching_algorithm\" : 6, \"user_can_change\" : true, \"is_insensitive\" : true, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 0, \"slug\" : \"slug\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * POST /api/groups
     *
     * @param createGroupRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "createGroup",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/groups/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Object> createGroup(
        @Parameter(name = "CreateGroupRequest", description = "") @Valid @RequestBody(required = false) CreateGroupRequest createGroupRequest
    ) {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * POST /api/saved_views
     *
     * @param createSavedViewsRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "createSavedViews",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/saved_views/",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> createSavedViews(
        @Parameter(name = "CreateSavedViewsRequest", description = "") @Valid @RequestBody(required = false) CreateSavedViewsRequest createSavedViewsRequest
    ) {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * POST /api/storage_paths
     *
     * @param createStoragePathRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "createStoragePath",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateStoragePath200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/storage_paths/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CreateStoragePath200Response> createStoragePath(
        @Parameter(name = "CreateStoragePathRequest", description = "") @Valid @RequestBody(required = false) CreateStoragePathRequest createStoragePathRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : 1, \"path\" : \"path\", \"matching_algorithm\" : 6, \"user_can_change\" : true, \"is_insensitive\" : true, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 0, \"slug\" : \"slug\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * POST /api/tags
     *
     * @param createTagRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "createTag",
        tags = { "Tags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateTag200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/tags/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CreateTag200Response> createTag(
        @Parameter(name = "CreateTagRequest", description = "") @Valid @RequestBody(required = false) CreateTagRequest createTagRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : 1, \"matching_algorithm\" : 6, \"user_can_change\" : true, \"color\" : \"color\", \"is_insensitive\" : true, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 0, \"text_color\" : \"text_color\", \"is_inbox_tag\" : true, \"slug\" : \"slug\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * POST /api/ui_settings
     *
     * @param createUISettingsRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "createUISettings",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateUISettings200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/ui_settings/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CreateUISettings200Response> createUISettings(
        @Parameter(name = "CreateUISettingsRequest", description = "") @Valid @RequestBody(required = false) CreateUISettingsRequest createUISettingsRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"success\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * POST /api/users
     *
     * @param createUserRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "createUser",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetUsers200ResponseResultsInner.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/users/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GetUsers200ResponseResultsInner> createUser(
        @Parameter(name = "CreateUserRequest", description = "") @Valid @RequestBody(required = false) CreateUserRequest createUserRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"is_active\" : true, \"is_superuser\" : true, \"user_permissions\" : [ \"\", \"\" ], \"is_staff\" : true, \"last_name\" : \"last_name\", \"groups\" : [ \"\", \"\" ], \"password\" : \"password\", \"id\" : 5, \"date_joined\" : \"date_joined\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"username\" : \"username\", \"inherited_permissions\" : [ \"inherited_permissions\", \"inherited_permissions\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * DELETE /api/correspondents/{id}
     *
     * @param id  (required)
     * @return Success (status code 204)
     */
    @Operation(
        operationId = "deleteCorrespondent",
        tags = { "Correspondents" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/correspondents/{id}/"
    )
    default ResponseEntity<Void> deleteCorrespondent(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * DELETE /api/documents/{id}
     *
     * @param id  (required)
     * @return Success (status code 204)
     */
    @Operation(
        operationId = "deleteDocument",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/documents/{id}/"
    )
    default ResponseEntity<Void> deleteDocument(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * DELETE /api/document_types/{id}
     *
     * @param id  (required)
     * @return Success (status code 204)
     */
    @Operation(
        operationId = "deleteDocumentType",
        tags = { "DocumentTypes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/document_types/{id}/"
    )
    default ResponseEntity<Void> deleteDocumentType(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * DELETE /api/groups/{id}
     *
     * @param id  (required)
     * @return Success (status code 204)
     */
    @Operation(
        operationId = "deleteGroup",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/groups/{id}/"
    )
    default ResponseEntity<Void> deleteGroup(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * DELETE /api/storage_paths/{id}
     *
     * @param id  (required)
     * @return Success (status code 204)
     */
    @Operation(
        operationId = "deleteStoragePath",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/storage_paths/{id}/"
    )
    default ResponseEntity<Void> deleteStoragePath(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * DELETE /api/tags/{id}
     *
     * @param id  (required)
     * @return Success (status code 204)
     */
    @Operation(
        operationId = "deleteTag",
        tags = { "Tags" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/tags/{id}/"
    )
    default ResponseEntity<Void> deleteTag(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * DELETE /api/users/{id}
     *
     * @param id  (required)
     * @return Success (status code 204)
     */
    @Operation(
        operationId = "deleteUser",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/users/{id}/"
    )
    default ResponseEntity<Void> deleteUser(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/documents/{id}/download
     *
     * @param id  (required)
     * @param original  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "downloadDocument",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/pdf", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/documents/{id}/download/",
        produces = { "application/pdf" }
    )
    default ResponseEntity<org.springframework.core.io.Resource> downloadDocument(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "original", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "original", required = false) Boolean original
    ) {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/correspondents
     *
     * @param page  (optional)
     * @param fullPerms  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getCorrespondents",
        tags = { "Correspondents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetCorrespondents200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/correspondents/",
        produces = { "application/json" }
    )
    default ResponseEntity<GetCorrespondents200Response> getCorrespondents(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "full_perms", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "full_perms", required = false) Boolean fullPerms
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{\"count\":0,\"next\":null,\"previous\":null,\"all\":[],\"results\":[]}";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/documents/{id}
     *
     * @param id  (required)
     * @param page  (optional)
     * @param fullPerms  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getDocument",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetDocument200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/documents/{id}/",
        produces = { "application/json" }
    )
    default ResponseEntity<GetDocument200Response> getDocument(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "full_perms", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "full_perms", required = false) Boolean fullPerms
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : 7, \"archive_serial_number\" : 2, \"notes\" : [ { \"note\" : \"note\", \"created\" : \"created\", \"document\" : 1, \"id\" : 7, \"user\" : 1 }, { \"note\" : \"note\", \"created\" : \"created\", \"document\" : 1, \"id\" : 7, \"user\" : 1 } ], \"added\" : \"added\", \"created\" : \"created\", \"title\" : \"title\", \"content\" : \"content\", \"tags\" : [ 5, 5 ], \"storage_path\" : 5, \"permissions\" : { \"view\" : { \"groups\" : [ 3, 3 ], \"users\" : [ 9, 9 ] }, \"change\" : { \"groups\" : [ 3, 3 ], \"users\" : [ 9, 9 ] } }, \"archived_file_name\" : \"archived_file_name\", \"modified\" : \"modified\", \"correspondent\" : 6, \"original_file_name\" : \"original_file_name\", \"id\" : 0, \"created_date\" : \"created_date\", \"document_type\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/documents/{id}/metadata
     *
     * @param id  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getDocumentMetadata",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetDocumentMetadata200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/documents/{id}/metadata/",
        produces = { "application/json" }
    )
    default ResponseEntity<GetDocumentMetadata200Response> getDocumentMetadata(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"archive_size\" : 6, \"archive_metadata\" : [ { \"prefix\" : \"prefix\", \"namespace\" : \"namespace\", \"value\" : \"value\", \"key\" : \"key\" }, { \"prefix\" : \"prefix\", \"namespace\" : \"namespace\", \"value\" : \"value\", \"key\" : \"key\" } ], \"original_metadata\" : [ \"\", \"\" ], \"original_filename\" : \"original_filename\", \"original_mime_type\" : \"original_mime_type\", \"archive_checksum\" : \"archive_checksum\", \"original_checksum\" : \"original_checksum\", \"lang\" : \"lang\", \"media_filename\" : \"media_filename\", \"has_archive_version\" : true, \"archive_media_filename\" : \"archive_media_filename\", \"original_size\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/documents/{id}/preview
     *
     * @param id  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getDocumentPreview",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/pdf", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/documents/{id}/preview/",
        produces = { "application/pdf" }
    )
    default ResponseEntity<org.springframework.core.io.Resource> getDocumentPreview(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/documents/{id}/suggestions
     *
     * @param id  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getDocumentSuggestions",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetDocumentSuggestions200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/documents/{id}/suggestions/",
        produces = { "application/json" }
    )
    default ResponseEntity<GetDocumentSuggestions200Response> getDocumentSuggestions(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"storage_paths\" : [ \"\", \"\" ], \"document_types\" : [ \"\", \"\" ], \"dates\" : [ \"\", \"\" ], \"correspondents\" : [ \"\", \"\" ], \"tags\" : [ \"\", \"\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/documents/{id}/thumb
     *
     * @param id  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getDocumentThumb",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/pdf", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/documents/{id}/thumb/",
        produces = { "application/pdf" }
    )
    default ResponseEntity<org.springframework.core.io.Resource> getDocumentThumb(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/document_types
     *
     * @param page  (optional)
     * @param fullPerms  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getDocumentTypes",
        tags = { "DocumentTypes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetDocumentTypes200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/document_types/",
        produces = { "application/json" }
    )
    default ResponseEntity<GetDocumentTypes200Response> getDocumentTypes(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "full_perms", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "full_perms", required = false) Boolean fullPerms
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{\"count\":0,\"next\":null,\"previous\":null,\"all\":[],\"results\":[]}";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/documents
     *
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param query  (optional)
     * @param ordering  (optional)
     * @param tagsIdAll  (optional)
     * @param documentTypeId  (optional)
     * @param storagePathIdIn  (optional)
     * @param correspondentId  (optional)
     * @param truncateContent  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getDocuments",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetDocuments200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/documents/",
        produces = { "application/json" }
    )
    default ResponseEntity<GetDocuments200Response> getDocuments(
        @Parameter(name = "Page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Page", required = false) Integer page,
        @Parameter(name = "page_size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false) Integer pageSize,
        @Parameter(name = "query", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false) String query,
        @Parameter(name = "ordering", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ordering", required = false) String ordering,
        @Parameter(name = "tags__id__all", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tags__id__all", required = false) List<Integer> tagsIdAll,
        @Parameter(name = "document_type__id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "document_type__id", required = false) Integer documentTypeId,
        @Parameter(name = "storage_path__id__in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "storage_path__id__in", required = false) Integer storagePathIdIn,
        @Parameter(name = "correspondent__id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "correspondent__id", required = false) Integer correspondentId,
        @Parameter(name = "truncate_content", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "truncate_content", required = false) Boolean truncateContent
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{\"count\":0,\"next\":null,\"previous\":null,\"all\":[],\"results\":[]}";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/groups
     *
     * @param page  (optional)
     * @param pageSize  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getGroups",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetGroups200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/groups/",
        produces = { "application/json" }
    )
    default ResponseEntity<GetGroups200Response> getGroups(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "page_size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false) Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{\"count\":0,\"next\":null,\"previous\":null,\"all\":[],\"results\":[]}";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/logs/{id}
     *
     * @param id  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getLog",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/logs/{id}/",
        produces = { "application/json" }
    )
    default ResponseEntity<List<String>> getLog(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ \"\", \"\" ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/logs
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getLogs",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/logs/",
        produces = { "application/json" }
    )
    default ResponseEntity<List<String>> getLogs(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ \"\", \"\" ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/saved_views
     *
     * @param page  (optional)
     * @param pageSize  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getSavedViews",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetSavedViews200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/saved_views/",
        produces = { "application/json" }
    )
    default ResponseEntity<GetSavedViews200Response> getSavedViews(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "page_size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false) Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{\"count\":0,\"next\":null,\"previous\":null,\"all\":[],\"results\":[]}";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/storage_paths
     *
     * @param page  (optional)
     * @param fullPerms  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getStoragePaths",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetStoragePaths200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/storage_paths/",
        produces = { "application/json" }
    )
    default ResponseEntity<GetStoragePaths200Response> getStoragePaths(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "full_perms", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "full_perms", required = false) Boolean fullPerms
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{\"count\":0,\"next\":null,\"previous\":null,\"all\":[],\"results\":[]}";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/tags
     *
     * @param page  (optional)
     * @param fullPerms  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getTags",
        tags = { "Tags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetTags200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/tags/",
        produces = { "application/json" }
    )
    default ResponseEntity<GetTags200Response> getTags(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "full_perms", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "full_perms", required = false) Boolean fullPerms
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{\"count\":0,\"next\":null,\"previous\":null,\"all\":[],\"results\":[]}";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/tasks
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getTasks",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GetTasks200ResponseInner.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/tasks/",
        produces = { "application/json" }
    )
    default ResponseEntity<List<GetTasks200ResponseInner>> getTasks(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * POST /api/token
     *
     * @param userInfo  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getToken",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/token/",
        consumes = { "application/json", "text/json", "application/*+json" }
    )
    default ResponseEntity<Void> getToken(
        @Parameter(name = "UserInfo", description = "") @Valid @RequestBody(required = false) UserInfo userInfo
    ) {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/ui_settings
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getUISettings",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetUISettings200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ui_settings/",
        produces = { "application/json" }
    )
    default ResponseEntity<GetUISettings200Response> getUISettings(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = """
                            {
                                "user": {
                                    "id": 3,
                                    "username": "demo",
                                    "is_superuser": true,
                                    "groups": []
                                },
                                "settings": {
                                    "tour_complete": true,
                                    "update_checking": {
                                        "backend_setting": "default"
                                    }
                                },
                                "permissions": [
                                    "delete_note",
                                    "view_permission",
                                    "add_mailrule",
                                    "delete_contenttype",
                                    "change_paperlesstask",
                                    "change_permission",
                                    "change_chordcounter",
                                    "delete_mailaccount",
                                    "change_tag",
                                    "view_paperlesstask",
                                    "add_tokenproxy",
                                    "delete_chordcounter",
                                    "delete_userobjectpermission",
                                    "change_savedviewfilterrule",
                                    "view_chordcounter",
                                    "delete_groupobjectpermission",
                                    "add_groupobjectpermission",
                                    "delete_savedviewfilterrule",
                                    "view_storagepath",
                                    "change_savedview",
                                    "view_mailaccount",
                                    "add_userobjectpermission",
                                    "add_note",
                                    "add_storagepath",
                                    "delete_documenttype",
                                    "view_group",
                                    "change_documenttype",
                                    "add_chordcounter",
                                    "change_note",
                                    "delete_groupresult",
                                    "change_document",
                                    "view_user",
                                    "change_taskresult",
                                    "add_log",
                                    "view_groupresult",
                                    "delete_permission",
                                    "view_tag",
                                    "view_correspondent",
                                    "view_processedmail",
                                    "view_logentry",
                                    "view_session",
                                    "change_contenttype",
                                    "add_savedviewfilterrule",
                                    "view_documenttype",
                                    "add_session",
                                    "change_logentry",
                                    "add_paperlesstask",
                                    "view_savedview",
                                    "add_savedview",
                                    "delete_correspondent",
                                    "change_uisettings",
                                    "change_tokenproxy",
                                    "view_mailrule",
                                    "add_uisettings",
                                    "view_taskresult",
                                    "change_token",
                                    "view_token",
                                    "change_correspondent",
                                    "delete_paperlesstask",
                                    "change_groupresult",
                                    "add_mailaccount",
                                    "add_document",
                                    "view_userobjectpermission",
                                    "change_storagepath",
                                    "delete_taskresult",
                                    "delete_log",
                                    "view_groupobjectpermission",
                                    "delete_user",
                                    "delete_document",
                                    "add_contenttype",
                                    "delete_processedmail",
                                    "delete_session",
                                    "add_permission",
                                    "change_userobjectpermission",
                                    "view_document",
                                    "add_tag",
                                    "add_correspondent",
                                    "delete_uisettings",
                                    "view_uisettings",
                                    "add_logentry",
                                    "delete_token",
                                    "view_note",
                                    "change_mailrule",
                                    "add_processedmail",
                                    "change_group",
                                    "delete_storagepath",
                                    "change_user",
                                    "add_user",
                                    "delete_logentry",
                                    "view_log",
                                    "change_session",
                                    "add_taskresult",
                                    "add_groupresult",
                                    "delete_mailrule",
                                    "view_tokenproxy",
                                    "add_token",
                                    "view_contenttype",
                                    "change_groupobjectpermission",
                                    "view_savedviewfilterrule",
                                    "delete_group",
                                    "add_documenttype",
                                    "add_group",
                                    "delete_savedview",
                                    "change_log",
                                    "change_mailaccount",
                                    "delete_tokenproxy",
                                    "change_processedmail",
                                    "delete_tag"
                                ]
                            }""";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/users
     *
     * @param page  (optional)
     * @param pageSize  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getUsers",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetUsers200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/users/",
        produces = { "application/json" }
    )
    default ResponseEntity<GetUsers200Response> getUsers(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "page_size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false) Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = """
                            {
                                "count": 1,
                                "next": null,
                                "previous": null,
                                "all": [
                                    3
                                ],
                                "results": [
                                    {
                                        "id": 3,
                                        "username": "demo",
                                        "email": "demo@localhost",
                                        "password": "**********",
                                        "first_name": "",
                                        "last_name": "",
                                        "date_joined": "2023-10-13T20:49:13.178865+02:00",
                                        "is_staff": true,
                                        "is_active": true,
                                        "is_superuser": true,
                                        "groups": [],
                                        "user_permissions": [],
                                        "inherited_permissions": [
                                            "paperless_mail.view_mailrule",
                                            "sessions.add_session",
                                            "contenttypes.delete_contenttype",
                                            "documents.change_tag",
                                            "documents.view_storagepath",
                                            "auth.change_permission",
                                            "documents.change_paperlesstask",
                                            "django_celery_results.delete_chordcounter",
                                            "documents.change_documenttype",
                                            "paperless_mail.delete_processedmail",
                                            "documents.view_savedview",
                                            "auth.delete_group",
                                            "documents.change_savedview",
                                            "documents.add_uisettings",
                                            "documents.view_uisettings",
                                            "auth.change_user",
                                            "documents.delete_log",
                                            "documents.add_note",
                                            "documents.delete_savedview",
                                            "documents.change_document",
                                            "paperless_mail.view_processedmail",
                                            "contenttypes.add_contenttype",
                                            "documents.change_correspondent",
                                            "documents.change_log",
                                            "documents.view_paperlesstask",
                                            "authtoken.view_token",
                                            "auth.view_permission",
                                            "admin.delete_logentry",
                                            "authtoken.view_tokenproxy",
                                            "sessions.delete_session",
                                            "documents.delete_document",
                                            "documents.delete_note",
                                            "django_celery_results.add_taskresult",
                                            "admin.add_logentry",
                                            "guardian.view_userobjectpermission",
                                            "documents.change_uisettings",
                                            "documents.add_log",
                                            "auth.add_permission",
                                            "documents.view_savedviewfilterrule",
                                            "admin.change_logentry",
                                            "documents.add_storagepath",
                                            "guardian.add_groupobjectpermission",
                                            "documents.view_tag",
                                            "django_celery_results.change_chordcounter",
                                            "admin.view_logentry",
                                            "authtoken.add_tokenproxy",
                                            "django_celery_results.delete_taskresult",
                                            "sessions.view_session",
                                            "auth.change_group",
                                            "documents.change_note",
                                            "paperless_mail.view_mailaccount",
                                            "django_celery_results.change_groupresult",
                                            "documents.delete_paperlesstask",
                                            "documents.delete_uisettings",
                                            "documents.add_tag",
                                            "auth.delete_permission",
                                            "auth.view_user",
                                            "paperless_mail.change_processedmail",
                                            "paperless_mail.change_mailaccount",
                                            "authtoken.delete_token",
                                            "guardian.change_groupobjectpermission",
                                            "authtoken.change_tokenproxy",
                                            "django_celery_results.view_groupresult",
                                            "paperless_mail.delete_mailrule",
                                            "authtoken.change_token",
                                            "documents.view_correspondent",
                                            "django_celery_results.delete_groupresult",
                                            "django_celery_results.view_chordcounter",
                                            "documents.add_document",
                                            "documents.delete_savedviewfilterrule",
                                            "documents.add_savedviewfilterrule",
                                            "django_celery_results.view_taskresult",
                                            "guardian.delete_groupobjectpermission",
                                            "documents.delete_tag",
                                            "django_celery_results.add_chordcounter",
                                            "documents.change_storagepath",
                                            "auth.delete_user",
                                            "auth.add_group",
                                            "guardian.delete_userobjectpermission",
                                            "authtoken.add_token",
                                            "documents.change_savedviewfilterrule",
                                            "django_celery_results.change_taskresult",
                                            "documents.view_note",
                                            "paperless_mail.delete_mailaccount",
                                            "guardian.change_userobjectpermission",
                                            "guardian.add_userobjectpermission",
                                            "documents.view_document",
                                            "documents.add_savedview",
                                            "auth.view_group",
                                            "auth.add_user",
                                            "guardian.view_groupobjectpermission",
                                            "documents.delete_documenttype",
                                            "contenttypes.change_contenttype",
                                            "documents.view_documenttype",
                                            "sessions.change_session",
                                            "documents.view_log",
                                            "paperless_mail.add_mailrule",
                                            "documents.add_paperlesstask",
                                            "documents.delete_storagepath",
                                            "authtoken.delete_tokenproxy",
                                            "contenttypes.view_contenttype",
                                            "paperless_mail.add_processedmail",
                                            "documents.add_correspondent",
                                            "documents.delete_correspondent",
                                            "paperless_mail.add_mailaccount",
                                            "documents.add_documenttype",
                                            "paperless_mail.change_mailrule",
                                            "django_celery_results.add_groupresult"
                                        ]
                                    }
                                ]
                            }""";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * POST /api
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "root",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/"
    )
    default ResponseEntity<Void> root(
        
    ) {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * POST /api/documents/selection_data
     *
     * @param selectionDataRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "selectionData",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SelectionData200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/documents/selection_data/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SelectionData200Response> selectionData(
        @Parameter(name = "SelectionDataRequest", description = "") @Valid @RequestBody(required = false) SelectionDataRequest selectionDataRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = """
                            {
                                "selected_correspondents": [],
                                "selected_tags": [],
                                "selected_document_types": [],
                                "selected_storage_paths": []
                            }""";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /api/statistics
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "statistics",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Statistics200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/statistics/",
        produces = { "application/json" }
    )
    default ResponseEntity<Statistics200Response> statistics(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = """
                            {
                                "documents_total": 0,
                                "documents_inbox": null,
                                "inbox_tag": null,
                                "document_file_type_counts": 0,
                                "character_count": null
                            }
                            """;
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * PUT /api/correspondents/{id}
     *
     * @param id  (required)
     * @param updateCorrespondentRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateCorrespondent",
        tags = { "Correspondents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateCorrespondent200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/correspondents/{id}/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UpdateCorrespondent200Response> updateCorrespondent(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UpdateCorrespondentRequest", description = "") @Valid @RequestBody(required = false) UpdateCorrespondentRequest updateCorrespondentRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{\"count\":0,\"next\":null,\"previous\":null,\"all\":[],\"results\":[]}";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * PUT /api/documents/{id}
     *
     * @param id  (required)
     * @param updateDocumentRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateDocument",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateDocument200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/documents/{id}/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UpdateDocument200Response> updateDocument(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UpdateDocumentRequest", description = "") @Valid @RequestBody(required = false) UpdateDocumentRequest updateDocumentRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : 7, \"user_can_change\" : true, \"archive_serial_number\" : 2, \"notes\" : [ \"\", \"\" ], \"added\" : \"added\", \"created\" : \"created\", \"title\" : \"title\", \"content\" : \"content\", \"tags\" : [ 5, 5 ], \"storage_path\" : 5, \"archived_file_name\" : \"archived_file_name\", \"modified\" : \"modified\", \"correspondent\" : 6, \"original_file_name\" : \"original_file_name\", \"id\" : 0, \"created_date\" : \"created_date\", \"document_type\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * PUT /api/document_types/{id}
     *
     * @param id  (required)
     * @param updateDocumentTypeRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateDocumentType",
        tags = { "DocumentTypes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateDocumentType200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/document_types/{id}/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UpdateDocumentType200Response> updateDocumentType(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UpdateDocumentTypeRequest", description = "") @Valid @RequestBody(required = false) UpdateDocumentTypeRequest updateDocumentTypeRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : 5, \"matching_algorithm\" : 6, \"user_can_change\" : true, \"document_count\" : 1, \"is_insensitive\" : true, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 0, \"slug\" : \"slug\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * PUT /api/groups/{id}
     *
     * @param id  (required)
     * @param updateGroupRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateGroup",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateGroup200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/groups/{id}/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UpdateGroup200Response> updateGroup(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UpdateGroupRequest", description = "") @Valid @RequestBody(required = false) UpdateGroupRequest updateGroupRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"permissions\" : [ \"permissions\", \"permissions\" ], \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * PUT /api/storage_paths/{id}
     *
     * @param id  (required)
     * @param updateStoragePathRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateStoragePath",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateStoragePath200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/storage_paths/{id}/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UpdateStoragePath200Response> updateStoragePath(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UpdateStoragePathRequest", description = "") @Valid @RequestBody(required = false) UpdateStoragePathRequest updateStoragePathRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : 5, \"path\" : \"path\", \"matching_algorithm\" : 6, \"user_can_change\" : true, \"document_count\" : 1, \"is_insensitive\" : true, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 0, \"slug\" : \"slug\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * PUT /api/tags/{id}
     *
     * @param id  (required)
     * @param updateTagRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateTag",
        tags = { "Tags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateTag200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/tags/{id}/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UpdateTag200Response> updateTag(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UpdateTagRequest", description = "") @Valid @RequestBody(required = false) UpdateTagRequest updateTagRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : 5, \"matching_algorithm\" : 6, \"user_can_change\" : true, \"document_count\" : 1, \"color\" : \"color\", \"is_insensitive\" : true, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 0, \"text_color\" : \"text_color\", \"is_inbox_tag\" : true, \"slug\" : \"slug\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * PUT /api/users/{id}
     *
     * @param id  (required)
     * @param updateUserRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateUser",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetUsers200ResponseResultsInner.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/users/{id}/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GetUsers200ResponseResultsInner> updateUser(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UpdateUserRequest", description = "") @Valid @RequestBody(required = false) UpdateUserRequest updateUserRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"is_active\" : true, \"is_superuser\" : true, \"user_permissions\" : [ \"\", \"\" ], \"is_staff\" : true, \"last_name\" : \"last_name\", \"groups\" : [ \"\", \"\" ], \"password\" : \"password\", \"id\" : 5, \"date_joined\" : \"date_joined\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"username\" : \"username\", \"inherited_permissions\" : [ \"inherited_permissions\", \"inherited_permissions\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * POST /api/documents/post_document
     *
     * @param title  (optional)
     * @param created  (optional)
     * @param documentType  (optional)
     * @param tags  (optional)
     * @param correspondent  (optional)
     * @param document  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "uploadDocument",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/documents/post_document/",
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<Void> uploadDocument(
        @Parameter(name = "title", description = "") @Valid @RequestParam(value = "title", required = false) String title,
        @Parameter(name = "created", description = "") @Valid @RequestParam(value = "created", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime created,
        @Parameter(name = "document_type", description = "") @Valid @RequestParam(value = "document_type", required = false) Integer documentType,
        @Parameter(name = "tags", description = "") @Valid @RequestPart(value = "tags", required = false) List<Integer> tags,
        @Parameter(name = "correspondent", description = "") @Valid @RequestParam(value = "correspondent", required = false) Integer correspondent,
        @Parameter(name = "document", description = "") @RequestPart(value = "document", required = false) List<MultipartFile> document
    ) {
        return new ResponseEntity<>(HttpStatus.OK);

    }

}
